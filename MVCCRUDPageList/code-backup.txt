@model PagedList.IPagedList<MVCCRUDPageList.Models.CustomerDTO>
@using PagedList.Mvc;


@section csssection {
    <link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />


    <style>
        .form-gap {
            margin-bottom: 15px;
        }
    </style>
}

@{
    ViewBag.Title = "Index";
}

<h2>List of Customers</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>

@using (Html.BeginForm("Index", "Customers", new { page = ViewBag.CurrentPage, SortColumn = ViewBag.CurrentSort, CurrentSort = ViewBag.OldSort }))
{
<div class="row form-gap">
    <div class="input-group col-xs-5 col-lg-4">
       @Html.TextBox("SearchText", null, new { @class= "form-control"})
        <div class="input-group-btn">
            <button type="submit" class="btn btn-search btn-info" id="submit">
                <span class="glyphicon glyphicon-search"></span>
                <span class="label-icon">Search</span>
            </button>
        </div>
    </div>

    <div class="input-group col-xs-5 col-lg-8">
    </div>
</div>
}

@{
    var className = "";
    if (ViewBag.SortOrder.Equals("asc"))
    {
        className = "glyphicon glyphicon-chevron-up";
    }
    else
    {
        className = "glyphicon glyphicon-chevron-down";
    }
}

<div class="table-responsive">
    <table class="table table-bordered table-hover">
        <tr>
            <th>
                @*@Html.DisplayNameFor(model => model.FirstOrDefault().CompanyName)*@

                @Html.ActionLink("Company", "Index",
                new { page = ViewBag.CurrentPage, SortColumn = "CompanyName", CurrentSort = ViewBag.CurrentSort, SearchText = ViewBag.SearchText })
                @if (ViewBag.CurrentSort == "CompanyName")
                { 
                    <i class="@className"></i>
                }
            </th>

            <th>
                @*@Html.DisplayNameFor(model => model.FirstOrDefault().ContactName)*@
                @Html.ActionLink("Name", "Index",
                new { page = ViewBag.CurrentPage, SortColumn = "ContactName", CurrentSort = ViewBag.CurrentSort, SearchText = ViewBag.SearchText })
                @if (ViewBag.CurrentSort == "ContactName")
                { 
                    <i class="@className"></i>            
                }
            </th>

            <th>
                @*@Html.DisplayNameFor(model => model.FirstOrDefault().ContactTitle)*@
                @Html.ActionLink("Title", "Index",
                new { page = ViewBag.CurrentPage, SortColumn = "ContactTitle", CurrentSort = ViewBag.CurrentSort, SearchText = ViewBag.SearchText })
                @if (ViewBag.CurrentSort == "ContactTitle")
                { 
                    <i class="@className"></i>            
                }
            </th>

            <th>
                @*@Html.DisplayNameFor(model => model.FirstOrDefault().Address)*@
                @Html.ActionLink("Address", "Index",
                new { page = ViewBag.CurrentPage, SortColumn = "Address", CurrentSort = ViewBag.CurrentSort, SearchText = ViewBag.SearchText })
                @if (ViewBag.CurrentSort == "Address")
                { 
                    <i class="@className"></i>            
                }
            </th>


            <th class="text-center">Action</th>
        </tr>

        @foreach (var item in Model)
            {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.CompanyName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ContactName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ContactTitle)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Address)
                </td>


                <td class="text-center">
                    @Html.ActionLink("Edit", "Edit", new { id = item.CustomerID, page = ViewBag.CurrentPage }) |
                    @Html.ActionLink("Details", "Details", new { id = item.CustomerID, page = ViewBag.CurrentPage }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.CustomerID, page = ViewBag.CurrentPage })
                </td>
            </tr>
            }

    </table>

</div>

@if(Model.Count>0)
{
    @: Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount / (Total Records:  @Model.TotalItemCount)

    @Html.PagedListPager(Model, page => Url.Action("Index", new { page, SortColumn = ViewBag.CurrentSort, CurrentSort = ViewBag.OldSort, SearchText = ViewBag.SearchText }), PagedListRenderOptions.OnlyShowFivePagesAtATime)
}

